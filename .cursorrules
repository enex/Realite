# Realite – Cursor Agent Guide

## What this project is

- **App**: Expo + React Native (Expo Router) with Tailwind (NativeWind)
- **Server**: Bun/Node TypeScript code in `server/` (eventsourcing, projections, ORPC)
- **DB**: Postgres via Drizzle ORM (`db/schema.ts`, drizzle migrations in `drizzle/`)
- **RPC**: `@orpc/*` with client in `client/orpc.ts`, server wiring in `server/orpc.ts`
- **Containers**: Docker + docker-compose for local server

## How to run

- **Install deps**: `npm install`
- **Start Expo app**: `npm start` (or `npm run ios` / `npm run android` / `npm run web`)
- **Server in Docker**:
  - Build: `./scripts/build-docker.sh` or `docker build -t realite-server .`
  - Run: `docker run -p 3000:3000 realite-server`
  - Compose dev: `docker-compose up` (add `-d` for background)

## Database (Drizzle)

- Generate SQL from schema: `npm run db:generate`
- Apply migrations (if wired): `npm run db:migrate`
- Introspect: `npm run db:pull`
- Push: `npm run db:push`
- Studio: `npm run db:studio`
- SQL/migration files live in `drizzle/`; schema in `db/schema.ts`

## Code conventions

- TypeScript everywhere; match existing formatting and imports
- Follow clean naming: descriptive identifiers, early returns, no deep nesting
- Avoid adding comments for trivial code; document “why” for complex logic
- Keep Expo Router file-based routes under `app/`
- Preserve indentation style of edited files

## Repo map (high-level)

- `app/` Expo Router screens and UI components
- `components/` shared UI
- `client/orpc.ts` ORPC client
- `server/` event sourcing, projections, ORPC server glue
- `db/schema.ts` Drizzle schema; migrations in `drizzle/`
- `shared/` shared domain types/utilities between app and server
- `scripts/` helper scripts (e.g., Docker)

## Environment

- Use `.env` (not committed) for secrets like Postgres URL, API keys
- Ensure server code reads env via `dotenv` if needed

## Common tasks for the agent

- Add a screen: create a file under `app/` and export a component
- Add an RPC: define in `server/orpc.ts`, export types; consume via `client/orpc.ts`
- Update DB: change `db/schema.ts` → `npm run db:generate` → apply migration
- Add projection/event: update `server/events.ts`, `server/eventsourcing.ts`, and `server/projections.ts`
- Containerize change: update `Dockerfile` and `docker-compose.yml` accordingly

## Do/Don’t

- Do run lints: `npm run lint` after edits
- Do keep types strict; avoid `any`
- Don’t introduce breaking route names under `app/` without updating navigation
- Don’t change Drizzle table/column names without generating migrations

## PR/Commit hygiene

- Keep edits scoped; run lints and typechecks
- If changing schema: include generated SQL in `drizzle/`

## Quick links

- Expo: `https://docs.expo.dev/`
- Expo Router: `https://expo.github.io/router/docs/`
- Drizzle ORM: `https://orm.drizzle.team/`
- ORPC: `https://orpc.dev/`

## Notes for Cursor

- This file is the source of truth for agents. Prefer commands listed here.
- If a task spans client and server, update both `app/` and `server/` parts consistently.
- Prefer small, incremental edits with clear, typed APIs.
